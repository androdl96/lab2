EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
lab2.exe -- emu8086 assembler version: 4.08  
 
[ 28/9/2018  --  19:26:49 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       
[   2]        :                                       .model small
[   3]        :                                       .stack
[   4]        :                                       .data
[   5]    0100: 01 02 03 04 05 06 47 07 08 09 50 0E   List1 db  1,2,3,4,5,6,47h,7,8,9,50h,14,15,16,17,18 ;41h-5Ah
                0F 10 11 12                         
[   6]    0110: 00                                    cont db 0
[   7]    0111: 4C 61 20 63 61 6E 74 69 64 61 64 20   caracter db 'La cantidad de elementos de la nueva es:$'
                64 65 20 65 6C 65 6D 65 6E 74 6F 73 
                20 64 65 20 6C 61 20 6E 75 65 76 61 
                20 65 73 3A 24                      
[   8]    013A: 00 00 00 00 00 00 00 00 00 00 00 00   List2 db 20 dup(?)
                00 00 00 00 00 00 00 00             
[   9]        :                                       .code
[  10]    0150:                                       Lab2 proc far
[  11]    0150: B8 10 00                              Mov AX,@data
[  12]    0153: 8E D8                                 Mov DS, AX
[  13]    0155: BB 00 00                              lea BX,List1
[  14]    0158: BF 3A 00                              lea DI,List2
[  15]    015B: B9 13 00                              mov cx,19
[  16]    015E: 8A 07                                 again:  mov AL,[BX]
[  17]    0160: B2 41                                 mov DL,41h
[  18]    0162: 3A D0                                 cmp DL,AL
[  19]    0164: 77 20                                 ja lb0
[  20]    0166: B2 5A                                 mov DL,5Ah
[  21]    0168: 3A D0                                 cmp DL,Al
[  22]    016A: 72 1A                                 jb lb0
[  23]    016C: 43                                    here:   inc BX
[  24]    016D: 8A 07                                 mov AL,[BX]
[  25]    016F: B2 41                                 mov DL,41h
[  26]    0171: 3A D0                                 cmp DL,AL
[  27]    0173: 77 06                                 ja  lb1
[  28]    0175: B2 5A                                 mov DL,5Ah
[  29]    0177: 3A D0                                 cmp DL,Al
[  30]    0179: 77 0E                                 ja exit
[  31]    017B: 88 05                                 lb1:    mov [DI],AL
[  32]    017D: 47                                    inc DI
[  33]    017E: FE 06 10 00                           inc cont
[  34]    0182: E2 E8                                 loop here
[  35]    0184: EB 03                                 jmp exit
[  36]        :                                       
[  37]    0186: 43                                    lb0:    inc bx
[  38]    0187: E2 D5                                 loop again
[  39]        :                                       
[  40]    0189: B4 09                                 exit:   mov ah,09
[  41]    018B: BA 11 00                              mov dx,offset caracter
[  42]    018E: CD 21                                 int 21h
[  43]    0190: BA 00 00                              mov DX,0
[  44]    0193: 8A 16 10 00                           mov Dl,cont
[  45]    0197: 80 C2 30                              add Dl,30h
[  46]    019A: B4 02                                 mov ah,02
[  47]    019C: CD 21                                 int 21h
[  48]    019E: B8 00 4C                              Mov AX, 4C00h
[  49]    01A1: CD 21                                 Int 21h
[  50]        :                                       Lab2 endp
[  51]        :                                       End
[  52]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: A3      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 2F      -   check sum (l.byte)
0013: 9A      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 15      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 15      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
